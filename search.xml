<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>UE4游戏架构</title>
    <url>/2020/03/06/UE4%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="UE4MMoRPG游戏-Online"><a href="#UE4MMoRPG游戏-Online" class="headerlink" title="UE4MMoRPG游戏(Online)"></a>UE4MMoRPG游戏(Online)</h1><p>客户端其实就是对服务端一个粗略的模范</p>
<h2 id="World"><a href="#World" class="headerlink" title="World"></a>World</h2><p>一个容器,容器里容纳了所有物体,这些物体都有一个特点就是继承至Actor</p>
<h3 id="GameLnstance"><a href="#GameLnstance" class="headerlink" title="GameLnstance"></a>GameLnstance</h3><p>一个游戏的实例,凌驾于所有游戏之上,再切换关卡的时候GameLnstance里的数据依然保留,需要在切换关卡保留的数据可以存放在GameLnstance</p>
<a id="more"></a>
<h3 id="GameMode"><a href="#GameMode" class="headerlink" title="GameMode"></a>GameMode</h3><p>GameMode如果在联网状态下是一个服务端(Server),客户端不能访问</p>
<h3 id="GameSession"><a href="#GameSession" class="headerlink" title="GameSession"></a>GameSession</h3><p>GameSession更像一个房间,让玩家进入,加入游戏,存在于服务端</p>
<h3 id="GameState"><a href="#GameState" class="headerlink" title="GameState"></a>GameState</h3><p>GameState相当于一个全局的数据管理,在客户端也存在一份，可以和客户端实时同步,可以被客户端和服务端访问</p>
<h3 id="PlayerController"><a href="#PlayerController" class="headerlink" title="PlayerController"></a>PlayerController</h3><p>PlayerController是非常重要的,它关联着服务端和客户端,客户端是通过Controller来向服务端发请求,用它来控制Pawn<br>包含:<br>    输出响应控制<br>    旁观者<br>    替换角色<br>    网络连接<br>    GM命令<br>    声音<br>    语言<br>    射线<br>    客户端显示HUD<br>    视口<br>    相机管理<br>    屏幕震动<br>    作弊管理<br>    客户端和服务端都存在<br>    执行客户端逻辑和服务端逻辑请求</p>
<h3 id="PlayerState"><a href="#PlayerState" class="headerlink" title="PlayerState"></a>PlayerState</h3><p>掌管玩家的一些数据，一个角色的攻击力,防御力,Buff以及其他的一些数据,需要通过PlayerController来访问</p>
<h3 id="Pawn"><a href="#Pawn" class="headerlink" title="Pawn"></a>Pawn</h3><p>Pawn也需要PlayerController来访问,Pawn其实是一个角色的表现,比如动画,模型以及其他组件,Pawn也是客户端和服务端都存在一份</p>
<h3 id="HUD"><a href="#HUD" class="headerlink" title="HUD"></a>HUD</h3><p>HUD只存在于客户端,服务端是没有这个东西的,用来做UMG或者Slate的管理</p>
<h3 id="GameViewoirtClient"><a href="#GameViewoirtClient" class="headerlink" title="GameViewoirtClient"></a>GameViewoirtClient</h3><p>GameViewoirtClient是一个游戏视口,在游戏中只存在于客户端,输出响应和渲染</p>
<h3 id="GameUserSettings"><a href="#GameUserSettings" class="headerlink" title="GameUserSettings"></a>GameUserSettings</h3><p>GameUserSettings可以做些配置，自定义的一些配置</p>
<h3 id="WorldSettings"><a href="#WorldSettings" class="headerlink" title="WorldSettings"></a>WorldSettings</h3><p>调节当前关卡的属性</p>
]]></content>
      <categories>
        <category>UE4</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>UPROPERTY</title>
    <url>/2020/03/06/Unreal-UPROPERTY/</url>
    <content><![CDATA[<h1 id="UPROPERTY"><a href="#UPROPERTY" class="headerlink" title="UPROPERTY"></a>UPROPERTY</h1><p>UPROPERTY 用途广泛,它允许变量被复制、被序列化，并可从蓝图中进行访问.垃圾回收器还使用它们来追踪对 UObject 的引用数.</p>
<a id="more"></a>
<h2 id="属性说明符"><a href="#属性说明符" class="headerlink" title="属性说明符"></a>属性说明符</h2><p>声明属性时,属性说明符,可被添加到声明,以控制属性与引擎和编辑器诸多方面的相处方式.</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">Category=<span class="string">"TopCategory|SubCategory|..."</span> <span class="comment">// 指定在蓝图编辑工具中显示时的属性类别。使用 | 运算符定义嵌套类目。</span></span><br><span class="line"><span class="symbol">UP:</span>:AdvancedDisplay <span class="comment">// 属性将被放置在其出现的任意面板的高级（下拉）部分中。</span></span><br><span class="line"><span class="symbol">UP:</span>:AssetRegistrySearchable <span class="comment">// 说明符说明此属性与其值将被自动添加到将此包含为成员变量的所有资源类实例的资源注册表。不可在结构体属性或参数上使用</span></span><br><span class="line"><span class="symbol">UP:</span>:BlueprintAssignable <span class="comment">// 只能与组播委托共用。公开属性在蓝图中指定。</span></span><br><span class="line"><span class="symbol">UP:</span>:BlueprintAuthorityOnly <span class="comment">// 此属性必须为一个组播委托。在蓝图中，其只接受带 BlueprintAuthorityOnly 标签的事件。</span></span><br><span class="line"><span class="symbol">UP:</span>:BlueprintCallable <span class="comment">// 仅用于组播委托。应公开属性在蓝图代码中调用。</span></span><br><span class="line"><span class="symbol">UP:</span>:BlueprintReadOnly <span class="comment">// 此属性可由蓝图读取，但不能被修改。此说明符与 BlueprintReadWrite 说明符不兼容。</span></span><br><span class="line"><span class="symbol">UP:</span>:BlueprintReadWrite <span class="comment">// 可从蓝图读取或写入此属性。此说明符与 BlueprintReadOnly 说明符不兼容。</span></span><br><span class="line"><span class="symbol">UP:</span>:VisibleAnywhere <span class="comment">// 说明此属性在所有属性窗口中可见，但无法被编辑。此说明符与“Edit”说明符不兼容。</span></span><br><span class="line"><span class="symbol">UP:</span>:VisibleDefaultsOnly <span class="comment">// 说明此属性只在原型的属性窗口中可见，无法被编辑。此说明符与所有“Edit”说明符均不兼容。</span></span><br><span class="line"><span class="symbol">UP:</span>:VisibleInstanceOnly <span class="comment">// 说明此属性只在实例的属性窗口中可见（在原型属性窗口中不可见），无法被编辑。此说明符与所有“Edit”说明符均不兼容。</span></span><br></pre></td></tr></table></figure>
<h2 id="元数据说明符"><a href="#元数据说明符" class="headerlink" title="元数据说明符"></a>元数据说明符</h2><p>声明类,接口,结构体,列举,列举值,函数,或属性时,可添加 元数据说明符 来控制其与引擎和编辑器各方面的相处方式。每一种类型的数据结构或成员都有自己的元数据说明符列表。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">DisplayName=<span class="string">"Property Name"</span> <span class="comment">// 此属性显示的命名，不显示代码生成的命名。</span></span><br><span class="line">AllowPreserveRatio <span class="comment">// 用于 Fvector 属性。在细节面板中显示此属性时将添加一个比率锁。</span></span><br></pre></td></tr></table></figure>


<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="VisibleAnywhere"><a href="#VisibleAnywhere" class="headerlink" title="VisibleAnywhere"></a>VisibleAnywhere</h3><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">UPROPERTY(<span class="name">VisibleAnywhere</span>, Category = <span class="string">"Test"</span>)</span><br><span class="line">    bool Test<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/UPROPERTY_1.png" alt="UPROPERTY_1"></p>
<h3 id="VisibleDefaultsOnly"><a href="#VisibleDefaultsOnly" class="headerlink" title="VisibleDefaultsOnly"></a>VisibleDefaultsOnly</h3><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">UPROPERTY(<span class="name">VisibleDefaultsOnly</span>, Category = <span class="string">"Test"</span>)</span><br><span class="line">    bool Test<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/UPROPERTY_2.png" alt="UPROPERTY_1"></p>
<h3 id="VisibleInstanceOnly"><a href="#VisibleInstanceOnly" class="headerlink" title="VisibleInstanceOnly"></a>VisibleInstanceOnly</h3><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">UPROPERTY(<span class="name">VisibleInstanceOnly</span>, Category = <span class="string">"Test"</span>)</span><br><span class="line">    bool Test<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/UPROPERTY_3.png" alt="UPROPERTY_1"></p>
<h3 id="BlueprintReadWrite"><a href="#BlueprintReadWrite" class="headerlink" title="BlueprintReadWrite"></a>BlueprintReadWrite</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">UPROPERTY</span>(<span class="keyword">BlueprintReadWrite, </span>Category = <span class="string">"Test"</span>)</span><br><span class="line">    <span class="keyword">bool </span>Test<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/UPROPERTY_4.png" alt="UPROPERTY_1"></p>
<h2 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a><a href="https://docs.unrealengine.com/zh-CN/Programming/UnrealArchitecture/Reference/Properties/index.html" target="_blank" rel="noopener">官方链接</a></h2>]]></content>
      <categories>
        <category>UE4</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>UPROPERTY</tag>
      </tags>
  </entry>
</search>

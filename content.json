{"meta":{"title":"萌新小强的Unreal日常","subtitle":"Unreal是世界上最好的引擎","description":"人类的悲欢并不相通，我只觉得他们吵闹","author":"萌新小强","url":"https://mengxinxiaoqiang.github.io","root":"/"},"pages":[{"title":"about","date":"2020-03-05T14:58:38.000Z","updated":"2020-03-05T06:59:47.688Z","comments":true,"path":"about/index.html","permalink":"https://mengxinxiaoqiang.github.io/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-03-05T14:59:01.000Z","updated":"2020-03-05T07:11:25.763Z","comments":true,"path":"categories/index.html","permalink":"https://mengxinxiaoqiang.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-03-05T14:58:55.000Z","updated":"2020-03-05T07:14:31.301Z","comments":true,"path":"tags/index.html","permalink":"https://mengxinxiaoqiang.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"UE4智能指针","slug":"UE4智能指针","date":"2020-03-06T15:41:55.000Z","updated":"2020-03-06T07:41:55.715Z","comments":true,"path":"2020/03/06/UE4智能指针/","link":"","permalink":"https://mengxinxiaoqiang.github.io/2020/03/06/UE4%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"UE4断言","slug":"UE4断言","date":"2020-03-06T15:16:08.000Z","updated":"2020-03-06T07:41:14.352Z","comments":true,"path":"2020/03/06/UE4断言/","link":"","permalink":"https://mengxinxiaoqiang.github.io/2020/03/06/UE4%E6%96%AD%E8%A8%80/","excerpt":"断言checkcheck()中填入false或0或NULL都会被断掉 12AActor* Test = nullptr;check(Test &amp;&amp; \"Test 不能为空指针\");","text":"断言checkcheck()中填入false或0或NULL都会被断掉 12AActor* Test = nullptr;check(Test &amp;&amp; \"Test 不能为空指针\"); verifyfverifyf和check完全相同 1verify(Test != nullptr); checkfcheckf和check完全相同,在调试时可以打印额外的信息 1checkf(Test, TEXT(\"Test &amp;s\"), *this-&gt;GetName()); checkNoentry进入当前函数就会被断掉 123456void AMyPawn_huauha::BeginPlay()&#123; //Super::BeginPlay(); checkNoEntry(); &#125; checkNoReentry会检测当前函数是否执行了两次，第一次运行是没有问题的，第二次运行就会被断掉 123456void AMyPawn_huauha::BeginPlay()&#123; //Super::BeginPlay(); checkNoReentry(); &#125; checkNoRecursion检测当前函数有没有递归，如果有就会被断掉 123456void AMyPawn_huauha::BeginPlay()&#123; //Super::BeginPlay(); checkNoRecursion(); BeginPlay();&#125; ensure类似于断点,不是直接崩溃,而是生成一个断点,可以继续往下走,用法和check一样 1ensure(0 &amp;&amp; \"Test\"); ensureMsgf类似于断点,不是直接崩溃,而是生成一个断点,可以继续往下走,用法和checkf一样,这两个和check最大的不同就是程序不会崩溃 1ensureMsgf(0 TEXT(\"%s\"),this-&gt;GetName());","categories":[{"name":"UE4","slug":"UE4","permalink":"https://mengxinxiaoqiang.github.io/categories/UE4/"},{"name":"笔记","slug":"UE4/笔记","permalink":"https://mengxinxiaoqiang.github.io/categories/UE4/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://mengxinxiaoqiang.github.io/tags/%E6%B8%B8%E6%88%8F/"}]},{"title":"UE4游戏架构","slug":"UE4游戏架构","date":"2020-03-06T13:11:42.000Z","updated":"2020-03-06T06:05:57.900Z","comments":true,"path":"2020/03/06/UE4游戏架构/","link":"","permalink":"https://mengxinxiaoqiang.github.io/2020/03/06/UE4%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/","excerpt":"UE4MMoRPG游戏(Online)客户端其实就是对服务端一个粗略的模范 World一个容器,容器里容纳了所有物体,这些物体都有一个特点就是继承至Actor GameLnstance一个游戏的实例,凌驾于所有游戏之上,再切换关卡的时候GameLnstance里的数据依然保留,需要在切换关卡保留的数据可以存放在GameLnstance","text":"UE4MMoRPG游戏(Online)客户端其实就是对服务端一个粗略的模范 World一个容器,容器里容纳了所有物体,这些物体都有一个特点就是继承至Actor GameLnstance一个游戏的实例,凌驾于所有游戏之上,再切换关卡的时候GameLnstance里的数据依然保留,需要在切换关卡保留的数据可以存放在GameLnstance GameModeGameMode如果在联网状态下是一个服务端(Server),客户端不能访问 GameSessionGameSession更像一个房间,让玩家进入,加入游戏,存在于服务端 GameStateGameState相当于一个全局的数据管理,在客户端也存在一份，可以和客户端实时同步,可以被客户端和服务端访问 PlayerControllerPlayerController是非常重要的,它关联着服务端和客户端,客户端是通过Controller来向服务端发请求,用它来控制Pawn包含: 输出响应控制 旁观者 替换角色 网络连接 GM命令 声音 语言 射线 客户端显示HUD 视口 相机管理 屏幕震动 作弊管理 客户端和服务端都存在 执行客户端逻辑和服务端逻辑请求 PlayerState掌管玩家的一些数据，一个角色的攻击力,防御力,Buff以及其他的一些数据,需要通过PlayerController来访问 PawnPawn也需要PlayerController来访问,Pawn其实是一个角色的表现,比如动画,模型以及其他组件,Pawn也是客户端和服务端都存在一份 HUDHUD只存在于客户端,服务端是没有这个东西的,用来做UMG或者Slate的管理 GameViewoirtClientGameViewoirtClient是一个游戏视口,在游戏中只存在于客户端,输出响应和渲染 GameUserSettingsGameUserSettings可以做些配置，自定义的一些配置 WorldSettings调节当前关卡的属性","categories":[{"name":"UE4","slug":"UE4","permalink":"https://mengxinxiaoqiang.github.io/categories/UE4/"},{"name":"笔记","slug":"UE4/笔记","permalink":"https://mengxinxiaoqiang.github.io/categories/UE4/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://mengxinxiaoqiang.github.io/tags/%E6%B8%B8%E6%88%8F/"}]},{"title":"UPROPERTY","slug":"Unreal-UPROPERTY","date":"2020-03-05T17:29:23.000Z","updated":"2020-03-06T06:05:57.908Z","comments":true,"path":"2020/03/06/Unreal-UPROPERTY/","link":"","permalink":"https://mengxinxiaoqiang.github.io/2020/03/06/Unreal-UPROPERTY/","excerpt":"UPROPERTYUPROPERTY 用途广泛,它允许变量被复制、被序列化，并可从蓝图中进行访问.垃圾回收器还使用它们来追踪对 UObject 的引用数.","text":"UPROPERTYUPROPERTY 用途广泛,它允许变量被复制、被序列化，并可从蓝图中进行访问.垃圾回收器还使用它们来追踪对 UObject 的引用数. 属性说明符声明属性时,属性说明符,可被添加到声明,以控制属性与引擎和编辑器诸多方面的相处方式. 1234567891011Category=\"TopCategory|SubCategory|...\" // 指定在蓝图编辑工具中显示时的属性类别。使用 | 运算符定义嵌套类目。UP::AdvancedDisplay // 属性将被放置在其出现的任意面板的高级（下拉）部分中。UP::AssetRegistrySearchable // 说明符说明此属性与其值将被自动添加到将此包含为成员变量的所有资源类实例的资源注册表。不可在结构体属性或参数上使用UP::BlueprintAssignable // 只能与组播委托共用。公开属性在蓝图中指定。UP::BlueprintAuthorityOnly // 此属性必须为一个组播委托。在蓝图中，其只接受带 BlueprintAuthorityOnly 标签的事件。UP::BlueprintCallable // 仅用于组播委托。应公开属性在蓝图代码中调用。UP::BlueprintReadOnly // 此属性可由蓝图读取，但不能被修改。此说明符与 BlueprintReadWrite 说明符不兼容。UP::BlueprintReadWrite // 可从蓝图读取或写入此属性。此说明符与 BlueprintReadOnly 说明符不兼容。UP::VisibleAnywhere // 说明此属性在所有属性窗口中可见，但无法被编辑。此说明符与“Edit”说明符不兼容。UP::VisibleDefaultsOnly // 说明此属性只在原型的属性窗口中可见，无法被编辑。此说明符与所有“Edit”说明符均不兼容。UP::VisibleInstanceOnly // 说明此属性只在实例的属性窗口中可见（在原型属性窗口中不可见），无法被编辑。此说明符与所有“Edit”说明符均不兼容。 元数据说明符声明类,接口,结构体,列举,列举值,函数,或属性时,可添加 元数据说明符 来控制其与引擎和编辑器各方面的相处方式。每一种类型的数据结构或成员都有自己的元数据说明符列表。 12DisplayName=\"Property Name\" // 此属性显示的命名，不显示代码生成的命名。AllowPreserveRatio // 用于 Fvector 属性。在细节面板中显示此属性时将添加一个比率锁。 基本用法VisibleAnywhere12UPROPERTY(VisibleAnywhere, Category = \"Test\") bool Test; VisibleDefaultsOnly12UPROPERTY(VisibleDefaultsOnly, Category = \"Test\") bool Test; VisibleInstanceOnly12UPROPERTY(VisibleInstanceOnly, Category = \"Test\") bool Test; BlueprintReadWrite12UPROPERTY(BlueprintReadWrite, Category = \"Test\") bool Test; 官方链接","categories":[{"name":"UE4","slug":"UE4","permalink":"https://mengxinxiaoqiang.github.io/categories/UE4/"},{"name":"笔记","slug":"UE4/笔记","permalink":"https://mengxinxiaoqiang.github.io/categories/UE4/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"UPROPERTY","slug":"UPROPERTY","permalink":"https://mengxinxiaoqiang.github.io/tags/UPROPERTY/"}]}]}